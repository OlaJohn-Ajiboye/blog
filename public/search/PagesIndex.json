[{"title":"VueX and Google Firebase(Part 2","href":"content/post/Building a Real-Time Data-Table with Vue.js/VueX and Google Firebase(Part 2.md","content":" title Building a RealTime DataTable with VuejsVueX and Google FirebasePart 2 author Ola John tags Vue VueXFirebase date 20190602T1356470303 draft true Cut out summary from your post content here The remaining content of your post"},{"title":"array-methods","href":"content/post/array-methods.md","content":" title Javascript Array Methods author Ola John tags JavascriptArray Coding date 20190602T1356470300 draft true Hellooo In this tutorial well be building a tiny web application using Vuejs with Vuex and FirebaseThe data table well be building will update the UI and the firestore database in realtime based on user interactionI have decided to go with an example not more complex than a todolist but a little more interesting thana todo list What well be building is a simple datatable that tracks user interaction Some of the assumptions I will make are that you have Node and NPM installed and a basic knowledge of Javascript Project description Project SetUp First things first lets install the Vue CLI Pop open your command linePowershell It doesnt really matter what directory you are This tutorial is based on Windows OS you can easily find similar commands for other OS Open the command line as an adminstrator and run npm install g vuecli This will quickly install the Vue CLI globally To verify if your installation worked correctly check the version of Vue installed by running vue version Scaffolding the project First we need to What well be building is a simple datatable that tracks user interaction Some of the assumptions I will make are that you have Node and NPM installed and a basic knowledge of Javascript Project description Project SetUp First things first lets install the Vue CLI Pop open your command linePowershell It doesnt really matter what directory you are This tutorial is based on Windows OS you can easily find similar commands for other OS Open the command line as an adminstrator and run npm install g vuecli This will quickly install the Vue CLI globally To verify if your installation worked correctly check the version of Vue installed by running vue version Scaffolding the project First we need to What well be building is a simple datatable that tracks user interaction Some of the assumptions I will make are that you have Node and NPM installed and a basic knowledge of Javascript Project description Project SetUp First things first lets install the Vue CLI Pop open your command linePowershell It doesnt really matter what directory you are This tutorial is based on Windows OS you can easily find similar commands for other OS Open the command line as an adminstrator and run npm install g vuecli This will quickly install the Vue CLI globally To verify if your installation worked correctly check the version of Vue installed by running vue version Scaffolding the project First we need to"},{"title":"build-apis-with-node-express-mongodb","href":"content/post/build-apis-with-node-express-mongodb.md","content":" title Build Apis With Node Express Mongodb date 20190602T2325400300 draft true "},{"title":"Express","href":"content/post/dynamic-content-with-Firebase-cloud-function,-Node/Express.md","content":" title Hosting dynamic content with Firebase cloud function NodeExpress and EJS author Ola John cover imgcoverjpg tags Express FirebaseNodeJSCloud Functions date 20190618T1229270300 draft true These days almost all websites are real applications living on the web Think of your favorite websites they all serve dynamic contents depending on user interactions and requests Due to the rise of SPAs Single Page Applications they are the defacto solution for serving dynamic featurerich content to the enduser But there are still use cases for Serverside rendering that includes Fast initial page load especially on slower networks Improved SEO across all search engines Initialized data at render time User requesting can get a unique page Users with javascript disabled can still see the application There are fullblown frameworks that enables you to achieve serverside rendering like Next Next Nest etc But what if you just need to serverside rendering for specific parts of your app In this tutorial well look at how t serve dynamic content using Googles Firebase Cloud Functions and Hosting You can not only server dynamic contents but also build microservices with the same approach Setting up Firebase The easiest way is to install the Firebase CLI on your local machine using NPM The assumption here is that you already have Node installed If not you can head to Node Foundationhttpsnodejsorgendownload to download Node Open your terminal and run the command below npm install g firebasetool Test that firebase is properly installed by running Firebase version to check if Firebase CLI is properly installed Setting up Firebase Hosting If this is your first time of running a firebase project You need to login into firebase console with a google account Run the below command firebase login After you are logged cd into the directory for the project Run firebase init hosting"},{"title":"es6-destructuring","href":"content/post/es6-destructuring.md","content":" title Part 5 ES6 Destructuring author Ola John Ajiboye tags Destructuring ES6 BeginnerJavascript date 20190606T2159330300 draft false Destructuring assignments okhand The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays or properties from objects into distinct variables Destructuring is one of the most common concept youd find looking at any React Code base It is quite straightforward to decipher but can look daunting for beginners at first Well look at this in two parts array and object destructuring in progressively complex example Array destructuring boom Lets say you have an array of my profile with ES5 const profile Ola John ElCapito SWE Nigeria let firstName profile0 let lastName profile1 let nickName profile2 With ES6 destructuring let firstNamelastNamenickName profile consolelogfirstNamelastNamenickName Ola John ElCapito It is obviosuly neater with the ES6 destructuring Skipping items One thing to take note of is that the destructured variables have to be mapped to the same index as the destructured array If you want to access lets say the 4th element in the array at index 3Nigeria and map it to variable country you cant just simply do let country profile You will need to take account of the first 3 elements What if you dont need them Then you need a comma as a placeholder to skip items in the array you do not need Lets have a look const profile Ola John ElCapito SWE Nigeria let firstNamelastName jobcountry profile consolelogfirstNamelastNamejobcountry Ola John SWE Nigeria Notice that I have replaced the nickname variable with a comma You can skip as much element as you need by replacing them with a coma lets skip firstName and job let lastNamenickName country profile consoleloglastNamenickNamecountry John ElCapito Nigeria Default values A variable can be assigned without a value in that case the value unpacked from the array is undefined Lets consider an example below const profile John ElCapito let realName nickName superPower profile consolelogrealName nickName superPower John ElCapito undefined We can use a default value instead So if the value should ever be undefined it is replaced by this default value Like so let realName nickName superPower Javascript profile consolelogrealName nickName superPower John ElCapito Javascript Swapping Variables ES6 array destructuring gives a more elegant way to swap variables in an array With ES5 you had to rely on some cumbersome XOR tricks to get this done let realName John let nickName El Capito this semicolon is mandatoryOtherwise you get an error realName nickName nickName realName consolelogrealName John consolelognickName ElCapito Object destructuring fire Destructuring simply means breaking a more complex entity into smaller parts Object destructuring helps breaks down a objects properties into smaller variables This concept is very common in modern Javascript frameworks Object destructuring seems to be much common that its array counter part Lets imagine you have an object containing data for a college student It is much easier to work with a destructured version of the data when all variables have been broken down destructured into smaller parts Lets take a stab at this in those examples const student name Ola John faculty law age 25 expectedYearOfGraduation 2052 isStudentBroke true gpa 042 Lets make sense of this students data without destructuring let name studentname let faculty studentfaculty let age studentage let expectedYearOfGraduation studentexpectedYearOfGraduation let gpa studentgpa let broke studentbroke consolelogMy name is name I am in Faculty of faculty I am ageyears old My GPA is gpa and isStudentBroke I am really broke Output My name is Ola John I am in Faculty of law I am 25years old My GPA is 042 and true I am really broke You can easily see how repetitive the code is how many time I had to assign variables from the student variable with let Asides the verbosity and repetition this is prone to error I could easily misspell one of the variables after repeatedly declaring over and over What if we could just extract all this variables with one variable assignment Easypeasy with Object destructuring All you have to do is to reference the variables you want to destructure the key object you are extracting from Enough jargonsshow me the code I hear you Here we go Lets destructure the previous student example const student name Ola John faculty law age 25 expectedYearOfGraduation 2052 isStudentBroke true gpa 042 let name faculty age expectedYearOfGraduation gpa broke student consolelogMy name is name I am in Faculty of faculty I am ageyears old My GPA is gpa and isStudentBroke I am really broke My name is Ola John I am in Faculty of law I am 25years old My GPA is 042 and true I am really broke Isnt that beautiful compared to what we had up there Terse straight to the point and elegant Assigning to new variable names A property can be unpacked from an object and assigned to a variable with a different name than the object property What does that even mean It implies that you can decide to give a different name other than the name in the original object Lets go back to our broke student Imagine for a second that we have to use the isStudentBroke andor the expectedYearOfGraduation properties from the student object we can rename them to something shorter for easy reference throughout the code You could rename for many other reasons but how Code sample to the rescue once more let name faculty age expectedYearOfGraduation year gpa isStudentBroke broke student now expectedYearOfGraduation is now reassgned to year and isStudentBroke to broke Assigning to new default values A variable can be assigned a default value in the case that the value unpacked from the object is undefined Lets say our broke student decides to not enter his broke status or gpa for instance If we try to destructure them we get undefined Lets see const student name Ola John faculty law age 25 expectedYearOfGraduation 2052 let name faculty age expectedYearOfGraduation gpa isStudentBroke student consolelogname faculty age expectedYearOfGraduation gpa isStudentBroke Ola John law 25 2052 undefined undefined What if we wanted to have default values whenever broke students with low gpa decide not to enter these details We can set default values just like with array destructuring const brokeStudent name Ola John faculty law age 25 expectedYearOfGraduation 2052 let name faculty age expectedYearOfGraduation gpa 0 broke true brokeStudent consolelogname faculty age expectedYearOfGraduation gpa broke Ola John law 25 2052 0 true now every broke student who didnt have those properties set will be considered broke and with gpa of 0 Assigning to new variables names and providing default values We could also assign a new variable name and provide all default values within one destructuring assignment Like so let name faculty age expectedYearOfGraduation year 2025 gpa isStudentBrokebroke true student For more in depth documentation of Object destructuring I highly recommend the mozillahttpsdevelopermozillaorgenUSdocsWebJavaScriptReferenceOperatorsDestructuringassignmentObjectdestructuring documentation"},{"title":"es6-module-system","href":"content/post/es6-module-system.md","content":" title Part 4 ES6 Module System author Ola John tags ES6 Beginner Coding Javascript date 20190606T2159110300 draft false ES6 Module system smiley ES6 modules are one of the more critically important concepts you will come across in every React program I will not delve indepth as to why the module patterns is important You can read more about that herehttpsexploringjscomes6chmoduleshtml herehttpswwwfreecodecamporgnewshowtousees6modulesandwhytheyreimportanta9b20b480773 and herehttpswwwsitepointcomunderstandinges6modules Instead I will provide a quick overview of what they are and how to quickly get started with them Instead I will provide a quick overview of what they are and how to quickly get started with them What are ES6 Modules The word modules refers to a small units of independent reusable code They are the foundation of many design patterns and are necessary to build any substantially complex application Lets look at building a computer for example it consists of several parts but you could just assemble each part without worrying about the engineering complexities behind each component or having to create your own components everytime As Software Engineers we usually have to reuse codes either written by others or by ourselves without having to reinvent the wheel all the time Creating and Exporting Modules The module you are exporting could be any reusable block of code It could be a simple variable a function a react component a class a third party module you modified etc Lets create simple modules and understand how we can export themES6 provides two ways to export a module from a file named export and default export Lets create some modules in a file named myModulesjs Ignore the implementation details if you are not sure how the code works This is one major point of using third party modules The implementation or how it works is less important Just know what it does and how to use it myModulesjs const moduleConst title I am a module CONST this function takes an array and add all the numbers const addNumberInArray array arrayreducea b a b this function takes an array and finds the average const findArrayAverage array arrayreducea b a b arraylength Now that we have created our module lets make them accessible to other parts of our code by exporting them Each module can be exported individuallyNamed Export With named exports one can have multiple named exports per file Then import the specific modules surrounded in braces The name of imported module has to be the same as the name of the exported module myModulesjs individually exported exports const moduleConst title I am a module CONST exports just this function individually export const addNumberInArray array arrayreducea b a b exports just this function individually export const findArrayAverage array arrayreducea b a b arraylength But that looks cumbersome and repetitive Is there a better way Sure Use a single export statement for all modules in myModulesjs myModulesjs const moduleConst title I am a module comment this function takes an array and add all the numbers const addNumberInArray array arrayreducea b a b this function takes an array finds the average const findArrayAverage array arrayreducea b a b arraylength export moduleConst addNumberInArray findArrayAverage Export default Default export You can only have one default export per file When the default export is imported we can then specify any name for it myModulesjs named export export const moduleConst title I am a module comment named export export const addNumberInArray array arrayreducea b a b this is the default export only 1 is allowed in this file export default const findArrayAverage array arrayreducea b a b arraylength Exporting with an alias You can give the exported module an aliaslike a nickname usually because you prefer a shorter name For example the addNumberInArray and findArrayAverage could be exported with an alias like so export moduleConst addNumberInArray as add findArrayAverage as avg In summary from documentationhttpsdevelopermozillaorgenUSdocsWebJavaScriptReferenceStatementsexport Named exports are useful to export several values from within the same file While importing one will simply refer to the exported value by the same name Default export allows just a single default export per moduleYou can of course have several other named exports within the same file The default export is considered the main exported value A default export can be a function a class an object or anything else Importing Modules Now that we understand how to export modules lets look at importing them and using them Importing is quite straightforward with the import keyword Importing from myModulesjs will look like so appjs import moduleConstaddNumberInArray findArrayAverage from myModulesjs You can also import with an alias here if you didnt export with an alias import moduleConst addNumberInArray as add findArrayAverage as avg from myModulesjs You can import everything that is exported from a module like this appjs import as All from myModulesjs this allows us to have access to every member of the module with the dot notationLike so AllmoduleConst AlladdNumberInArray since this is a function we have to call it AllfindArrayAverage Importing a module with a default member When you import a default export you simply use the import keyword to import the module like weve been doing The only major difference is that you could call the import whatever name you wish For example myModulesjs export const moduleConst title I am a module comment export const addNumberInArray array arrayreducea b a b this is the default export export default const findArrayAverage array arrayreducea b a b arraylength appjs all the below 3 will be referencing the findArrayAverage module since it is the only default export in myModulesjs import abrcadabra from myModulesjs import someMagic from myModulesjs import findArrayAverage from myModulesjs Using imported module Remember the main purpose of a module is to have a reusable piece of codeThe piece of code exposes an API to us that we can then use without having to ever understand the implementation details of the code itself Lets start with the simple examples from myModules Lets assume you have to calculate the averagesum of an array many times within your codeYou could simply import myModulesjs to perform the operationLets pretend these are even more complex algorithmic computations and you do not want to or cannot write the functions yourself You can simply import the module and use them in your code like so appjs import addNumberInArray findArrayAverage from myModulesjs const array 12345 I need to calculate sum of an array using the addNumberInArray function from myModulesjs Simply pass the array to the function like so addNumberInArrayarray returns the sum which is 15 I need to calculate average of an array using the findArrayAverage function from myModulesjs Simply pass the array to the function like so findArrayAveragearray returns the sum which is 38 Lets look at more interesting example from reactrouterdom We imported React from react library Then imported BrowserRouter Route and Link from reactrouterdom Note BrowserRouter has been imported with an alias Router this is much shorter to reference throughout the code than the longer BrowserRouter appjs import React from react we import React from the react library import BrowserRouter as Router Route Link from reactrouterdom import the modules we need from the reactrouterdom function AppRouter return we then use the imported Router here Home making use of the imported Link About Users making use of the imported Link export default AppRouter "},{"title":"es6-template-literals","href":"content/post/es6-template-literals.md","content":" title Part 3 ES6 Template Literals author Author Name tags Strings ES6 Coding Javascript date 20190606T2158530300 draft false Template literals Template strings muscle String interpolation and multiline strings are probably most of the template strings concepts youll encounter working with modern JavascriptTemplate strings are declared using backticks ES5 let exampleString I am an ES5 String or exampleString I am a String ES6 let exampleString I am an ES6 String Multiline strings You can get strings in multiple lines by using the string literals instead of the more cumbersome ES5 alternative ES5 consolelogstring text line 1n string text line 2 ES6 consolelogstring text line string text line 2 string text line 3 String Interpolation Template literals provide an easy way to interpolate expressions into strings You do so by using the syntax ES5 function es5String const name John let age 20 const country Nigerian const introduction My name is name I am a age year old country consolelogintroduction ES6 function es6String const name John let age 20 const country Nigerian const introduction My name is name I am a ageold country I will be age 5 years old in 5 years consolelogintroduction Template strings are commonly used with styledcomponents library in React StyledComponent example const fontSize calculateFontSize RedCenteredText styledh1 color red textalign center fontsize fontSize "},{"title":"es6-ternary-operators","href":"content/post/es6-ternary-operators.md","content":" title Part 2 ES6 Ternary Operators author Ola John Ajiboye tags ES6 Beginner Coding Javascript date 20190606T2158340300 draft false Ternary Operators hearteyes The conditional ternary operator is the only JavaScript operator that takes three operands This operator is frequently used as a shortcut for the if statement The ternary operator as the word ternary implies has three main parts The first is the condition that must resolve to a booleantruthy or falsy values The second part is the expression wed like to resolve if the condition is true and the third part is when the condition is false The Syntax condition exprIfTrue exprIfFalse Ternary operator is simply a more terse version of the ifelse statement Lets make a sharp comparison with ifelse to get a clearer picture For an ifelse statement you start with a condition like so ifcondition In the preceding block you then have the expression to run if the condition is true else you want the code in the else block to run ifelse statement let age 20 ifage18 return You are allowed to have a Beer else return Nope Equivalent Ternary age18 You are allowed to have a Beer Nope Besides false possible falsy expressions are null NaN 0 the empty string and undefined If condition is any of these the result of the conditional expression will be exprIfFalse Ternary operator can also be chained just like multiple ifelse statements function ifElseChain let age 12 ifage 0 age 12 age 0 age 12 age 18 You are a Teenager You are grown ass adult Ternary operators are usually used for conditional rendering in React Even for other case and every javascript code the principle is same and quite straightforward Lets look at a simple example from a functional React component This simply determines what to render depending on what the current value of isLoading is function LoadingIndicator isLoading return isLoading checks the value of isLoading Loading if true render loading null if false render nothing as in null "},{"title":"learn-react-hooks-by-building-a-recipeSearch-app","href":"content/post/learn-react-hooks-by-building-a-recipeSearch-app.md","content":" title Learn React Hooks and Context API by Building a Recipe Search App Part 1 author Ola JOHN tags React HooksES6Beginner date 20190627T2137300300 draft false This is a beginner tutorial in understanding React Hooks and the Context API In reality this is more of an attempt to explain these concepts to my self and to interested readers This will be in two parts with this first part focusing on the basics of hooks The other part will hopefully focus more on more advanced use cases and the Context API Well implement the search functionality and convert to using the Context API for managing states and avoiding props drilling How are we going to learn Well look at some contrast on handling the same state logic with a class component and then with React Hooks We will be building a Recipe Search application to solidify the concepts well then have a bottle of red wine to celebrate I believe messing with the code is the best way to learn Final Version of what well be building Well build a simple clone of the food2fork website This will not be a fully fledged version of it but well use their API with the top 30 recipes Add some UI logic of our own just to mess with the states and see how we handle them with hooks Prerequisite Basic Knowledge of React Javascript ES6 fundamentals Array methods Destructuring etc So what is a React Hook First things first so what is React Hook From documentationhttpsreactjsorgdocshooksstatehtml What is a Hook A Hook is a special function that lets you hook into React features For example useState is a Hook that lets you add React state to function components In simple English hooks allow us to hook into specific React Features For example useState as the name implies helps us to use state feature in React where we otherwise wouldnt be able to use it ie inside a function component Well explain a little bit in details the syntax usage etc through building the recipe search application Set Up Well be using createreactapp to bootstrap the application I have created a repo with a barebone create react app that we can quickly get started with Simply clone to follow along Run the command below git clone httpsgithubcomolajohnajiboyeBlogReactHookTutorialgit cd BlogReactHookTutorial Going back to the app well be building We shall be using the food2fork API to fetch and search a list of 30 top recipes However the API has a limited query we can make per day I have created the exact JSON response from them for this tutorial This will be served from here herehttpsapimyjsoncombinst7szj so that we wont be hitting their server too frequently Lets create the component folder in our src folder to hold the different components our app is likely to have Take a moment to think about that there will be a component displaying each Recipe a RecipeList component to render a list of the recipes a RecipeSearch component and RecipeDetails component for displaying additional details for each Recipe All components will be functional components since using hook is the point of this tutorial If you did everything correctly you should have a folder structure like below You can also clone the second branch in the repo here to jump to this point in the tutorial If you have not already one extension I will recommend installing is the ES7 ReactReduxGraphQLReactNative snippets It speeds up your React development by allowing you to type shorthands to get some React Snippet You can find out more herehttpsmarketplacevisualstudiocomitemsitemNamedsznajderes7reactjssnippets So lets get Hooked Why even Hooks One of the most common things you will do in any frontend application is fetching and displaying data and manipulating UI based on UX React is no different One of the common use cases of state is to store data from an API call Before hooks if you needed to have a state of any type within your app you absolutely have to use a class component Youd also need to fetch data asynchronously within the componentDidMount lifecycle For many this isnt a mighty problem but the React team believes it gives rise to the tight coupling of component logic Also in more complex apps it is hard to reuse stateful logic Dont take my word for that just read the motivation for hooks herehttpsreactjsorgdocshooksintrohtml Lets look at how well handle fetching data from the REST API I have created in a classical component before moving to how we are going to handle it with hooks import React Component from react import RecipeList from componentsRecipeList export default class test extends Component constructorprops superprops thisstate apiResponse componentDidMount fetchhttpsapimyjsoncombinst7szj thendata datajson thenapiResponse thissetState apiResponse render return Lets take a look at the same code with Hook and Effect followed by an explanation import React useState useEffect from react import RecipeList from componentsRecipeList function App const url useStatehttpsapimyjsoncombinst7szj const recipes setRecipes useState const fetchRecipe async const recipeData await fetchurl const recipes await recipeDatajson setRecipesrecipes useEffect fetchRecipe return export default App There are a couple of things that are obvious right away we have imported useState and useEffect from react These are the APIs exposed to us that enables us to use React Hooks The useState Hook accepts the initial state In the example above we have initialized it into an empty array We expect to populate the array with data from the API call This is equivalent to below in our class component thisstate apiResponse Furthermore the useState returns a pair of values to us They are the current state and a function that updates it So we get back currentState setStateFunction from the use state That is why we have written const recipes setRecipes useState in our application Where recipes is an array to hold our recipe data setRecipe is the function that enables us to update the state this is equivalent to thissetState in a class component In case the syntax looks confusing these are not React specific syntax but plain ES6 Javascript This is known as destructuring Since the useState returns a pair of value we have destructured it into an array The name we choose for them does not affect their behavior it is simply good practice to name them as name of your state setname of state hence we have const recipes setRecipes useState If you need some refresher or primer on destructuring I have written a little bit about it herehttpsolajohnmepostes6destructuring Another Javascript feature we need to take note of to fully understand what is going on here is closures Due to Javascript closure we have access to the destructured variables from the useState anywhere within our function Hence inside the fecthRecipe function and anywhere within the component we can use the setRecipe or any other variables without having to call it thissetRecipe etc For the purpose of this tutorial A simplified definition of closures is that it gives us access to the outer enclosing functions variablesscope chain and also to their return values You can read more herehttpswwwcodingamecomplaygrounds6516closuresinjavascriptforbeginners herehttpsjavascriptinfoclosure and watch herehttpswwwyoutubecomwatchv71AtaJpJHw0 Lets quickly pass the props down our components and get them set up to display the list of Recipe Since this isnt a Hook specific feature I am going to skip it You can find the updated repo up to this point here I have also added styling to speed things up The updated repo is on the thirdhookinappjs branch in the repohttpsgithubcomolajohnajiboyeBlogReactHookTutorial Using the useState At this point your Appjs should look like below we have simply passed down the recipes array inside our state as a recipes props to the RecipeList component Note I have also added a loading state with the useState and set it back to false after data is completely fetched This the first example of using multiple states import React useState useEffect from react import RecipeList from componentsRecipeList import RecipeDetails from componentsRecipeDetails function App const url httpsapimyjsoncombinst7szj const recipes setRecipes useState const loading setLoading useStatetrue const fetchRecipe async const recipeData await fetchurl const recipes await recipeDatajson setRecipesrecipes setLoadingfalse useEffect fetchRecipe return loading loading export default App Next lets move to the RecipeList component and see what we have Here we have simply received the recipes passed as a prop from the parent App component and immediately destructured it see line 5 We then mapped over it pass down each recipe to the Recipe component as prop Nothing particularly interesting here import React from react import Recipe from Recipe import RecipeSearch from RecipeSearch export default function RecipeList recipes return Recipe List recipesmaprecipe return Now to the fun part Inside the Recipe component I have added some contrived states that are simple enough to fully understand Well make an attempt to go line by line trying to understand what we are doing and how we are handling stateful logic with the useState hook You should have the below in your Recipe component import React useState from react export default function Recipe recipe const imageurl publisher title recipeid recipe const showInfo setShowInfo useStatefalse const recipeDetails setRecipeDetails useState const ingredients socialrank recipeDetails const handleShowInfo async e const id etargetdataset const response await fetchhttpswwwfood2forkcomapigetkey7cdab426afc366070dab735500555521rIdid const recipe await responsejson setRecipeDetailsrecipe setShowInfoshowInfo return title Provided by publisher More Info showInfo socialrank showInfo ingredientsmapi index return i null Lets understand the code above Like previously we have received the recipe as a prop from its parent component which is the RecipeList we have then destructured it immediately within the function argument We then went ahead to further destructure the parts we intend to use from the recipe object I know what the recipe object contains because I have tested the API so this isns some magic This is equivalent to below export default function Recipeprops const recipe thispropsrecipe const imageurl publisher title recipeid recipe Now to some useful state If you checked the application Youd realize that when we clicked on the more details button we get the extra information related to that recipe specifically the list of ingredient and the social rating Take a peek at the gif on top for a refresher So we need some kind of state to handle the desired user interaction Think about it for a moment we need a way to toggle between if more info should be shown or not We also need a way to fetch the info for the specific recipe The desired result will then be stored in some kind of state Viola we have identified at least 2 states Hence in our Application we have a showInfo and a recipeDetails state With the information we have lets use the useState Hook to work with this First we declare the showInfo state and the function to set the showInfo setShowInfo equivalent to thisSetState We set the value to false Second we declare the recipeDetails and the setRecipeDetails We set the value to an empty array Thats hopefully simple enough we have set up the initial states And prepared for handling state change with setShowInfo and setRecipeDetails Moving to the handleShowInfo function This is an async function that basically helps to fetch data And also handling state change to show the info or not Lets take it apart line by line Since we intend to call handleShowInfo on click of a button we have access to the event object Inside the button we have set the recipeid as a dataattribute This enables us to grab the id for the specific recipe Inside the handleShowInfo we then get hold of the id by extracting it out of the eventtarget property Since we need to get additional info there is a need to make an HTTP request with the id This is what we have done next and awaited the response We then converted the value to a json and store the value in const recipe Note You may need to get an API Key from food2forkhttpswwwfood2forkcom The current key will probably be out of limit The recipe we get as response is the slotted inside the setRecipeDetails to serve as and updater for the recipeDetails At this point we have simply set the state of recipeDetails to the array response variable recipe This is equivalent to thissetState recipedDetails recipe Another thing is that we set the value of showInfo to the opposite of what it was This is what creates the toggle effect whenever the button is clicked This is equivalent to thissetState showInfo showInfo And thats about it in the returned jsx we conditionally rendered the info based on the state of showInfo when the button is clicked We have additionally mapped over the array of ingredients to display them as the additional info This is the end of this very basic introduction of hooks and perhaps an oversimplification In the next iteration of this series we shall examine hooks in more details and then learn the Context API Hope you enjoyed the introduction Feedbacks are welcomes Stay tuned for the next update and see you soon Thank you "},{"title":"most-of-the-es6-you-need-get-started-really-well-with-react","href":"content/post/most-of-the-es6-you-need-get-started-really-well-with-react.md","content":" title The 20 Of ES6 you end up using 80 of the time Let Const date 20190602T2327340300 tags React JavascriptES6Coding draft false Variable declaration with let const This is the first part in the series I will be covering the other sections in part 2 One of the more confusing part of learning a Javascript framework is that everything looks like magic at first Especially when your knowledge of modern Javascript is not up to date You are unsure which part of the code is some abracadabra or just plain ES6 Javascript At least this was my feeling when I started learning Reactor even Angularalthough that was TypescriptYou get caught thinking what the hell is this bindthis everywhere and why what of those weird looking syntaxes and these funny variable assignments toooh that was destructuring This series is an attempt to layout some ES6 concepts I which I knew thoroughly before delving into React or any modern Javascript software for that matterThese fundamentals will make you a more productive modern Javascript developer quickly regardless of framework This series is geared towards beginners who already have some Javascript knowledge Well be taking a dive at the underlisted ES6 conceptsThese I believe are essential to getting a quick grasp of React in particular much faster Some are more simpler that the other and youll probably know them already But I guess its fine to go over them nonetheless I have divided the series into two sections This is the first section consisting of 5 parts You can skip to any topic by clicking on them below Ternary Operatorshttpsolajohnmepostes6ternaryoperators Template literals Template stringshttpsolajohnmepostes6templateliterals ES6 Module systemhttpsolajohnmepostes6modulesystem Destructuring assignmentshttpsolajohnmepostes6destructuring Variable declaration with letconst hearteyes Before ES6 var was the de facto keyword for declaring variables With ES6 two new keywords let and const were introduced for variable declarations But what are the differences and why bother with them anyways There are a couple of gotchas with declaring variables with the var keyword Scope and hoisting were chief amongst the issue with var But what does these 2 even mean The scope of var is the entire function block in which it is definedIt is also available globally when declared outside a function let on the other hand is limited to the block scope in which it was defined Global Object confounded var testOfVar I am Var let testOfLet I am Let consolelogthistestOfVar Outputs I am var consolelogthistestOfLet Outputs undefined As you would see the variable declared with let is not attached to the global object and therefore not accessible globallyOn the other hand var declared variable is accessible globally and therefore can be accidentally altered anywhere within the programThis is really bad and can be cause of debugging frustrationsHence it is recommended to use let instead of var almost always Scope smirk The let statement declares a block scope local variable optionally initializing it to a value In simple english variables declared with let has a limited scope within the block it is declared You can initialize the variable optionally if you desire But wait what is a block scope A block scope is the area within if switch conditions or for and while loops Generally speaking whenever you see expression this is a block Unlike var where the variable is hoisted to the top of the function regardless of the block scope Hence var declared variable is accessible throughout the entire function scope and can be modifiedWhy is this such a big deal you ask Some code snippets to the rescue below function testOfVar var myName John this will later be modified within the if block if true var myName Joshua consolelogmyName this is same variable as the first myName scope is ignoredModifies the variable and hoist it to top of function Outputs Joshua consolelogmyName myName has been modified within the if block Every reference of myName within this function block now refers to Joshua function testOfLet let myName John this will not be modified if true let myName Joshua consolelogmyName this is treated as another variable The scope is limited to this if block scope is respected this variable will not modify anything outside this block Outputs Joshua consolelogmyName myName declared at the top of the function is modified from the if block Output John ReDeclaration seenoevil With var it was possible to redeclare a variable which isnt a good thingYou could easily redeclare a variable that has already been declared and assign a different value to it It will introduce a bug without you noticing Let throws an error when you try to redeclare a variable within the same scope Example below function testOfVar var myName John var myName Joshua this doesnt even make sense but var makes it possible consolelogmyName Outputs Joshua function testOfLet let myName John let myName Joshua consolelogmyName SyntaxError myName is already been declared In summary avoid using the var statement for variable declaration You should almost always pick the let keyword when you need to declare a variable What about const smile const is quite similar to let The major difference is that const can not be reassignedDo not confuse reassigning with redeclaring In most cases youd want to declare a variable and make some reassignments depending on certain conditions Lets look at an example function constTest const age 6 const ageDeclaration if age 5 ageDeclaration I am age years old TypeError Assignment to constant variable return ageDeclaration But this is possible function constModifier const myProfile age 20 name John ageDeclaration if myProfileage 5 myProfileageDeclaration I am myProfileage years old the ageDeclaration property of my profile can be reassigned return myProfile returns age 20 name John ageDeclaration I am 20 years old In the example above we have declared ageDeclaration with an empty string Within the if block we are reassigning it to keep track of the age variable Note when we reassigned the ageDeclaration within the if block we did so without using the let statement This is the basic difference between redeclaration and reassigningAlmost always what we intend to do is to reassign a variable not redeclare it However with const you can neither redeclare or reassignAlthough it is possible to change the properties of the variable declared with const Use const when you are sure there is no intention to reassign the variable However you can still use const for objectsarraysclasses etc where some of the propertiesmembers has to be reassignedmodified Refer to code example above Next Up in Section 1 Ternary Operatorshttpsolajohnmepostes6ternaryoperators Template literals Template stringshttpsolajohnmepostes6templateliterals ES6 Module systemhttpsolajohnmepostes6modulesystem Destructuring assignmentshttpsolajohnmepostes6destructuring Coming up next in section 2 Not available yet Highorder Functionshighorderfunctions Arrow functionsarrowfunctions Map Filter and Reducemapandfilter SpreadRest Operatorspreadrestoperator Default function parametersdefaultfunctionparameters ES6 Classeses6classes Async JavaScriptasyncjavascript"},{"title":"object-oriented-javascript(Part 1)","href":"content/post/object-oriented-javascript(Part 1).md","content":" title Object Oriented Javascript Part1 date 20190602T2324170300 draft true "},{"title":"object-oriented-javascript2","href":"content/post/object-oriented-javascript2.md","content":" title Object Oriented Javascript Part2 date 20190602T2324170300 draft true "},{"title":"react-hook-and-context-api-part(2)","href":"content/post/react-hook-and-context-api-part(2).md","content":" title Learn React Hook and Context Api Part2 author Ola John tags React Beginner Javascript React Hooks date 20190704T1345080300 draft false This is the second part of the series in learning React Hooks and the Context API In the first parthttpsdevtomongoparkletslearnreacthooksandcontextapibybuildingarecipesearchapp39pc we learn the basics of useState built the first parts of the Recipe Search application The full code can be found on githubhttpsgithubcomolajohnajiboyeBlogReactHookTutorial Overview of what well learn in this section In this section well work a little bit more with states just to completely understand the concept Well explain useEffect Build the RecipeSearch component Well then refactor our state management strategy to make use of the Context APIuseContext Exciting right First things We wont be making too many comparisons with classical components from here forward Instead well focus more on learning the fundamentals of hooks From the last part I have extracted the RecipeDetails into its own component This is for two reasons It is the right thing to do its the point of componentbased frameworks It allows for code reuse Also this will give us ample opportunity to see the problem that arises with passing props aroundprops drilling And how context API can help us More on that later First lets take a stab at useEffect A quick primer of the useEffect hook In the first part we mentioned and used the useEffect hook but didnt give any detailed explanations I am certain only a few of us realize the problem with the way we have utilized the useEffect hook in the first part Hint remember how we had to create our own separate JSON response So as not to make too many API calls Haha we are doing something terribly wrong just using useEffect as we did before I will dive into that in a bit But first what is this useEffect hook As the name implies it must have something to do with effects right if thats what you guessed you are absolutely correct But what sort of effects From official React documentationhttpsreactjsorgdocshookseffecthtml effects are actions related to data fetching setting up a subscription and manually changing the DOM in React components These are all examples of side effects Some call it side effects others just call it effects We are referring to the same thingIf youre familiar with React class lifecycle methods you can think of useEffect Hook as componentDidMount componentDidUpdate and componentWillUnmount combined Using the useEffect hook correctly Lets relate this information to our application In Appjs we have fetched data from the food2fork API function and then called the function in the useEffect function This is equivalent to calling it inside the componentDidMount function Lets take a closer look But think about it for a second What is the intended use of componentDidMount the answer is in the name You only ever want to run any function inside this function when the component is mounted Lets go over that information slowly Mounting is phase the component is created your code and reacts internals then inserted into the DOM But if you have a function that causes a repeated effect inside a componentDidMount your component will continuously rerender except you find a way to clean it up This is done usually within the componentWillUnmount lifecycle How then does useEffect manage to replace componentDidMount and componentWillUnmount within one function Lets revisit our wrong use of the useEffect to have a better grab of this When we call the useEffect like below the components continuously rerenders because it has no clue how to unmount This is a terrible performance bottleneck this isnt quite right It works but well see the problem later on useEffect fetchRecipe Lets do a post morterm to see the problem in action Inside the fetchRecipe in the Appjs try console logging something to indicate when the component is rendered We could have also just inspected the Network tab in the browser But sometimes console logging and seeing it in action will probably drive the point home faster On the thirdhookinappjs branch of the repo Edit Appjs add the consolelog and pop open your console You should have something similar to below in the Appjs for this little experiment import React useState useEffect from react import RecipeList from componentsRecipeList import RecipeDetails from componentsRecipeDetails function App const apiKey 36920f6651c9cd9d91a6c3205cabaa19 let url httpswwwfood2forkcomapisearchkeyapiKey const showHomeButton setShowHomeButton useStatefalse const recipes setRecipes useState const loading setLoading useStatetrue const search setSearch useState const fetchRecipe async const recipeData await fetchurl const recipes await recipeDatajson setRecipesrecipes setLoadingfalse consolelogI am beign rendered again and again useEffect fetchRecipe return loading fetching search Recipe You will get the horror below What the hell is happening This is not even acceptable behavior We got away with it because of the JSON response I created We could make unlimited API calls without issues Obviously this cannot be the right way to do things in production So whats the problem or even the solution What is immediately clear is that the fetchRecipe continuously tries to fetch a response from the API and is being rerendered every time by useEffect Even though nothing has changed We naturally would have had to clean this up in a class component by unsubscribing from the API call within another componentWillUnmount Lets look at how useEffect handle this problem Now that we have appreciated the problem lets think about the solution Pause for a moment what do we actually intend to achieve In our case we want the fetchRecipe function to run only once when the component mounts that is fetch data once and display it Or when anything has an effect on the result of the function At this point nothing affects the result So how do we then overcome this problem Quite simple it turns out Inside the useEffect function we simply pass an empty array as the second parameter Hence we are indicating to the useEffect not to update except when the component is first mounted since we expect nothing to cause fetch recipe function to update Just like below useEffect fetchRecipe pass an empty array here And now if you went back into the Appjs and do a consolelog you will realize fetchRecipe only runs once This is great works well for our case But what if we wanted to update and rerender after something causes fetchRecipe to change You might ask what could this be Lets say we have a state that changes the url for fetching the data It means the data from fetchRecipe depends on url We just simply pass that parameter inside the array passed to useEffect Hence we can pass as many parameters as needed into the array useEffect fetchRecipe urlquery What you are saying in human language to useEffect is that only update when url or query parameter changes I recommend RobinWieruch httpswwwrobinwieruchdereacthooksfetchdata tutorial for more examples if you still get confused Getting back to our app Lets build the RecipeSearch component Armed with the knowledge of safely fetching data well now switch to using the API key from food2fork Hence well be doing some refactoring within Appjs Well also introduce the best practice of having a try catch block inside the async function to catch any errors clone the 4featureimplementedsearch branch of the repo to follow along First lets think of what we want to achieve with the search component and then think of how to achieve this So we want to enter a search when we click submit or press enter we want to change the content of the page to the new search result And we also would want to be able to go back to the top 30 recipes and thus clearing the search or return to the top 30 results depending on how you think about it See what I mean below Now we have a goal in mind how do we write the code with hooks Note I am trying to make this as basic as possible such that even with very basic React knowledge you can still build this So not everything is exactly hook specific Immediately it becomes obvious we definitely need some states to manage all those changes First we fetch another set of 30 recipe related to our search query Thats one state We also have to decide when the Go back Home button should appear or disappear you got it mate Thats another state Lastly and perhaps the most important state is that holding our search parameter Like previously lets look at how the code looks like in the Appjs and then explain it line by line Full code for search feature herehttpsgithubcomolajohnajiboyeBlogReactHookTutorialblobfeatureimplementedsearchsrcAppjs import React useState useEffect from react import RecipeList from componentsRecipeList import Appcss function App remeber to replace key const apiKey 36920f6651c9cd9d91a6c3205cabaa19 let url httpswwwfood2forkcomapisearchkeyapiKey const showHomeButton setShowHomeButton useStatefalse const recipes setRecipes useState const loading setLoading useStatetrue const search setSearch useState const error setError useState const fetchRecipe async try const recipeData await fetchurl const recipes await recipeDatajson setRecipesrecipes setLoadingfalse catch e if e setErroremessage consolelogerror const handleSubmit async e epreventDefault try setLoadingtrue const searchUrl urlqsearch const searchedRecipeData await fetchsearchUrl const recipes await searchedRecipeDatajson setRecipesrecipes setLoadingfalse setShowHomeButtontrue catch e consoleloge const handleSearchChange e setSearchetargetvalue const handleReturnHome fetchRecipe setShowHomeButtonfalse useEffect fetchRecipe return loading fetching search Recipe export default App Noticed how we have changed a couple of things First we are now safely making API requests directly Hence we are using our real API keys It will become apparent why we cant continue using my json anyways Lets go line by line We have set a variable for the url We know how the URL endpoint looks like from the food2forkhttpswwwfood2forkcomaboutapi documentation Next we set up a state with for showHomeButton to handle visibility for the home button And set the initial value to false That is initially when well be in the home page theres no point displaying home button The next two states are already familiar Then we have the search state and we set the original value to an empty string Since we are not searching for anything yet when we first visit the home page Next we have to manage how we respond to user typing in the search query We have set up the handleSearchChange function to handle that We have the handleSubmit button to take care of updating the data in the list to match the result from the search And finally we have the handleReturnHome function to obviously you guessed right Help us return home safely with just the 30 top recipes Lets examine how each function performs its duty First handleSearchChange The purpose is to capture user entry and then update the search state to equal user entry This is quite straight forward as the function body is even just 1 line const handleSearchChange event setSearcheventtargetvalue Here is how it works since we are responding to user input we have access to the onChange property from the event object We have simply grabbed the value from the eventtargetvalue and updated the search state with this value using the setSearch hook We then need to pass them as props all the way down to the RecipeSearch component like below This is one of those things to solve with Context API Next lets examine the most interesting function in Appjs The handleSubmit What does it do Lets look at the code first and then explain const handleSubmit async e epreventDefault try setLoadingtrue const searchUrl urlqsearch const searchedRecipeData await fetchsearchUrl const recipes await searchedRecipeDatajson setRecipesrecipes setLoadingfalse setShowHomeButtontrue catch e consoleloge Since this is going to be triggered on submit We have access to the event object First we need to prevent the default behavior of onSubmit which is to reload the page hence we have epreventDefault We set the loading state to true with setLoadingtrue indicating we are still fetching data We then take the current state of search that is now equal to the input by the user We use this to create a new API point based on the documentation we have from food2fork And then fetches new data based on this search query It then updates the current recipe state with setRecipe to match with the new data from the search query Now that we have the data we set loading state to false using setLoadingfalse Now the new recipe list is based on the search query we need a way to go back home Hence we have set the showHomeButton to true using setShowHomeButton Lastly we have the handleReturnHome function whose job is to get us back home with the top 30 recipe list So we simply fetched recipe as we did originally this already sets back the recipe state back to how it was We then set the showHomeButton back to false making the button disappear when we are on the home page We then simply passed down all the required states as props to child components where wed use them The Context API React Context API is essentially a way to create global states that can be used anywhere within the application This is an alternative to passing down props from grandparents to children and so on Its been touted as a lighter alternative to Redux In my experience I will say it more closely resembles Vues VueX Where you have a single source of truth and can access that state globally Lets examine the case of props drilling in our application You can imagine in an application simple as this we already have to pass props from Appjs through RecipeList and then to RecipeSearch Even though RecipeList component does not need the handlesSubmit and handlesSearchChange props we still need to pass them through because its the parent component to RecipeSearch Imagine more deeply nested components trees then you can already see chaos Libraries like Redux helps solve this problem but context is a simple lightweight version useContext hook to the rescue So what if we could access whatever state we want higher up within the component tree and just use them only where they are needed This is what we are going to do next with useContext hook There are a couple of things to understand with context API Context is designed to share data that can be considered global for a tree of React components Context is primarily used when some data needs to be accessible by many components at different nesting level Lets discuss the API that context gives us First we have ReactcreateContext It create a Context object When React renders a component that subscribes to this Context object it will read the current context value from the closest matching Provider above it in the tree ContextProvider Every Context object comes with a Provider React component that allows consuming components to subscribe to context changes ContextConsumer A React component that subscribes to context changes This lets you subscribe to a context within a function component Lets bundle all this into our example and see how it works First lets create a context folder or just a file with and indexjs file in it Inside indexjs we need to create a Provider that accepts and provides the data to all children components within it First lets move all our data fetching logic from Appjs into the context file You should be left with an almost empty Appjs like below import React useContext from react import RecipeList from componentsRecipeList function App return loading fetching search recipe export default App And indexjs import React useState useEffect from react const RecipeContext ReactcreateContext const apiKey 7cdab426afc366070dab735500555521 const RecipeProvider props let url httpswwwfood2forkcomapisearchkeyapiKey const showHomeButton setShowHomeButton useStatefalse const recipes setRecipes useState const loading setLoading useStatetrue const search setSearch useState const fetchRecipe async try const recipeData await fetchurl const recipes await recipeDatajson setRecipesrecipes setLoadingfalse consolelogrecipes catch e if e consolelogemessage Try updating the API key in Appjs const handleSubmit async e epreventDefault try setLoadingtrue const searchUrl urlqsearch const searchedRecipeData await fetchsearchUrl const recipes await searchedRecipeDatajson setRecipesrecipes setLoadingfalse setShowHomeButtontrue catch e consoleloge const handleSearchChange e setSearchetargetvalue const handleReturnHome fetchRecipe setShowHomeButtonfalse useEffect fetchRecipe return propschildren export RecipeProvider RecipeContext Lets try to understand the above code by taking it apart carefully We have simply moved all the logic for data fetching from our Appjs into indexjs so as to make it available globally We already know the drill we have the data and the states just like we did before Now to the interesting part on line 2 We have created the RecipeContext from ReactcreateContext method RecipeContext is just a variable the name is not relevant it is simply good practice to give it a name close to what it does When we created the RecipeContext it gives us access to 2 other properties namely the Provider and the Consumer The Provider gives us a way to pass all the data and states as props from the topmost part of React tree to wherever we would like to consume it Hence we created RecipeContextProvider and passed down all states and data as a prop called value We then export these values to be used Like below It will become clearer when we begin to use them propschildren export RecipeProvider RecipeContext Next we have to locate the highest tree in our component hierarchy to pass the value props to Its only through this way that it can be able to pass it along to all its children And that would be the indexjs in our root This is where the App component is located Hence the App component is able to pass any data or state as props to wherever it will be needed In the indexjs in the root of your application You should wrap the RecipeProvider around App like below import React from react import ReactDOM from reactdom import RecipeProvider from contextindex ReactDOMrender documentgetElementByIdroot From here henceforth all the props pass down inside our context file is available to all the children of App component which is essentially every component The exciting part is how well then use this Well make an example with RecipeList and RecipeSearch components Your RecipeList component should look like below import React useContext from react import Recipe from Recipe import RecipeSearch from RecipeSearch import RecipeContext from contextindex export default function RecipeList const appContext useContextRecipeContext const showHomeButton recipes handleReturnHome appContext return showHomeButton handleReturnHome Go Back Home Recipe List recipesmaprecipe return We have now imported RecipeContext from our file and imported useContext from React Inside our function we created a variable to hold the value of RecipeContext We then just grab only the values we need inside RecipeList This is so clean in many ways 2 of which are First we just went to RecipeList straight where we needed those states and data we didnt have to thread the props from parent to children Second we only extracted the props we needed within the component we didnt need to give RecipeList some props it didnt need but just has to pass along to its children We just go to that child component directly if they needed the data Lets examine RecipeSearch component Once again lets see the code and then explain it import React useContext from react import RecipeContext from contextindex export default function RecipeSearch const appContext useContextRecipeContext const handleSubmit handleSearchChange appContext return handleSubmite Search handleSearchChangee typetext classNameformcontrol idsearch placeholdercoffeee namesearch Like in the RecipeList we have imported useContext and RecipeContext We created the variables And just see how clean and concise this is we didnt have to get handleSubmit and handleSearchChange from RecipeList we just simply grabbed them from the context here And thats just about it We have covered 3 major types of hooks useState useEffect and useContext I believe these are the foundation necessary to understand more advanced and better ways to work with react hooks I believe they are cleaner and easier to digest for a beginner Moving forward if youd like to gain a deeper understanding You can refactor the Recipe component to use the useContext Take an old project with a class component and convert it into a functional component just using hooks If you want something more challenging learn the useReducer hook and how we can refactor multiple states in our context file to make use of useReducer Thank you The full code can be found on githubhttpsgithubcomolajohnajiboyeBlogReactHookTutorial Comments and feedback are welcomed"},{"title":"start-blog-with-hugo","href":"content/post/start-blog-with-hugo.md","content":" title Start Blog With Hugo author Author Name tags tagA tagB date 20190603T1317240300 draft true Cut out summary from your post content here The remaining content of your post"},{"title":"vue-realtime-firabse-app","href":"content/post/vue-realtime-firabse-app.md","content":" title Building a RealTime DataTable with VuejsVueX and Google FirebasePart 1 author Ola John tags Vue JavascriptRealtimeFirebaseWeb cover imgvuefbjpg date 20190602T1356470303 draft true Hellooo In this tutorial well be building a tiny web application using Vuejs with Vuex and FirebaseThe data table well be building will update the UI and the firestore database in realtime based on user interactionI have decided to go with an example not more complex than a todolist but a little more interesting thana todo list What well be building is a simple datatable that tracks user interaction Some of the assumptions I will make are that you have Node and NPM installed and a basic knowledge of Javascript Project description Project SetUp First things first lets install the Vue CLI Pop open your command linePowershell It doesnt really matter what directory you are This tutorial is based on Windows OS you can easily find similar commands for other OS Open the command line as an adminstrator and run npm install g vuecli This will quickly install the Vue CLI globally To verify if your installation worked correctly check the version of Vue installed by running vue version Scaffolding the project First we need to What well be building is a simple datatable that tracks user interaction Some of the assumptions I will make are that you have Node and NPM installed and a basic knowledge of Javascript Project description Project SetUp First things first lets install the Vue CLI Pop open your command linePowershell It doesnt really matter what directory you are This tutorial is based on Windows OS you can easily find similar commands for other OS Open the command line as an adminstrator and run npm install g vuecli This will quickly install the Vue CLI globally To verify if your installation worked correctly check the version of Vue installed by running vue version Scaffolding the project First we need to What well be building is a simple datatable that tracks user interaction Some of the assumptions I will make are that you have Node and NPM installed and a basic knowledge of Javascript Project description Project SetUp First things first lets install the Vue CLI Pop open your command linePowershell It doesnt really matter what directory you are This tutorial is based on Windows OS you can easily find similar commands for other OS Open the command line as an adminstrator and run npm install g vuecli This will quickly install the Vue CLI globally To verify if your installation worked correctly check the version of Vue installed by running vue version Scaffolding the project First we need to"}]